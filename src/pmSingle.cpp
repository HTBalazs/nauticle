/////////////////////////////////////////////////////////////////////////////
// Name:        pmSingle.cpp
// Purpose:     pmSingle class.
// Author:      Balázs Tóth
// Modified by:
// Created:     10/07/2016
// Copyright:   (c) LEMPS-project
// Licence:     GPL
/////////////////////////////////////////////////////////////////////////////

#include "pmSingle.h"

/////////////////////////////////////////////////////////////////////////////////////////
/// Returns the value stored for constant or variable.
/////////////////////////////////////////////////////////////////////////////////////////
pmTensor pmSingle::get_value(int const& i/*=0*/) const {
	return current_value;
}
/////////////////////////////////////////////////////////////////////////////////////////
/// Preints the content with name and value.
/////////////////////////////////////////////////////////////////////////////////////////
void pmSingle::printv() const {
	this->print();
	pLogger::logf<COLOR>(" = ");
	current_value.print();
}
/////////////////////////////////////////////////////////////////////////////////////////
/// Evaluates the single-valued constant or variable.
/////////////////////////////////////////////////////////////////////////////////////////
pmTensor pmSingle::evaluate(int const& i, Eval_type eval_type/*=current*/) const {
	return current_value;
}
/////////////////////////////////////////////////////////////////////////////////////////
/// Returns the copy of the object.
/////////////////////////////////////////////////////////////////////////////////////////
std::shared_ptr<pmSingle> pmSingle::clone() const {
	return std::static_pointer_cast<pmSingle, pmExpression>(clone_impl());
}
/////////////////////////////////////////////////////////////////////////////////////////
/// Returns the type in pmSingle format. It returns on of the followings: SCALAR, VECTOR, TENSOR. 
/////////////////////////////////////////////////////////////////////////////////////////
std::string pmSingle::get_type() const {
    if(current_value.is_scalar()) { return "SCALAR"; }
    if(current_value.is_vector()) { return "VECTOR"; }
    return "TENSOR";
}


